#!/usr/bin/env bash
#
# Description: All-in-One Manager for WARP & Hysteria Docker containers.
# Author: Your Name (Inspired by P3TERX)
# Version: 3.0.0

# --- Color Definitions & Log Function ---
FontColor_Red="\033[31m"; FontColor_Green="\033[32m"; FontColor_Yellow="\033[33m"
FontColor_Purple="\033[35m"; FontColor_Suffix="\033[0m"
log() { local LEVEL="$1"; local MSG="$2"; case "${LEVEL}" in INFO) local LEVEL="[${FontColor_Green}${LEVEL}${FontColor_Suffix}]";; WARN) local LEVEL="[${FontColor_Yellow}${LEVEL}${FontColor_Suffix}]";; ERROR) local LEVEL="[${FontColor_Red}${LEVEL}${FontColor_Suffix}]";; esac; echo -e "${LEVEL} ${MSG}"; }

# --- Global Configuration ---
WARP_CONTAINER_NAME="warp-docker"
WARP_IMAGE_NAME="caomingjun/warp"
WARP_VOLUME_PATH="$(pwd)/warp-data"

HYSTERIA_CONTAINER_NAME="hysteria-server"
HYSTERIA_IMAGE_NAME="tobyxdd/hysteria:v2.6.2"
HYSTERIA_CONFIG_DIR="$(pwd)/hysteria"
HYSTERIA_CONFIG_FILE="${HYSTERIA_CONFIG_DIR}/config.yaml"

SHARED_NETWORK_NAME="proxy-net"
CADDY_DATA_VOLUME="caddy_data" # Default Caddy data volume name

# --- Prerequisite Checks ---
check_docker() { if ! [ -x "$(command -v docker)" ]; then log ERROR "Docker is not installed."; exit 1; fi; if ! docker info >/dev/null 2>&1; then log ERROR "Docker service is not running."; exit 1; fi; }

# --- Helper Functions ---
check_container_exists() { docker ps -a -q -f name=^/${1}$ &>/dev/null; }
press_any_key() { echo ""; read -p "Press Enter to return..." < /dev/tty; }

# --- Automatic Configuration Generation ---
generate_hysteria_config() {
    local domain="$1"
    local password="$2"
    
    mkdir -p "${HYSTERIA_CONFIG_DIR}"
    
    cat > "${HYSTERIA_CONFIG_FILE}" << EOF
# Auto-generated by All-in-One script
listen: :443

auth:
  type: password
  password: ${password}

tls:
  cert: /data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${domain}/${domain}.crt
  key: /data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/${domain}/${domain}.key

# Outbound traffic goes through WARP
outbound:
  type: socks5
  server: ${WARP_CONTAINER_NAME}:1080
EOF
    log INFO "Hysteria configuration file created at ${HYSTERIA_CONFIG_FILE}"
}

# --- Core Management Functions ---

# 1. Unified Installation
install_all() {
    log INFO "Starting unified installation for WARP and Hysteria..."
    
    if check_container_exists "$WARP_CONTAINER_NAME" || check_container_exists "$HYSTERIA_CONTAINER_NAME"; then
        log ERROR "One or both containers already exist. Please uninstall first."
        return
    fi

    # --- Collect WARP Configuration ---
    log INFO "--- Step 1: Configure WARP Container ---"
    read -p "Enter WARP+ License Key (optional): " WARP_LICENSE_KEY < /dev/tty

    # --- Collect Hysteria Configuration ---
    log INFO "--- Step 2: Configure Hysteria Container ---"
    read -p "Enter your public domain name (e.g., your.domain.com): " HY_DOMAIN < /dev/tty
    read -p "Set a password for Hysteria: " HY_PASSWORD < /dev/tty
    
    if [ -z "$HY_DOMAIN" ] || [ -z "$HY_PASSWORD" ]; then
        log ERROR "Domain name and password for Hysteria are required."
        return
    fi
    
    # --- Start Deployment ---
    log INFO "--- Step 3: Deploying Services ---"
    
    log INFO "Creating shared network '${SHARED_NETWORK_NAME}'..."
    docker network create "${SHARED_NETWORK_NAME}" &>/dev/null || log WARN "Network '${SHARED_NETWORK_NAME}' already exists."
    
    generate_hysteria_config "$HY_DOMAIN" "$HY_PASSWORD"

    # Deploy WARP Container
    log INFO "Deploying ${WARP_CONTAINER_NAME} container..."
    WARP_CMD_ARRAY=(
        "docker" "run" "-d" "--name" "${WARP_CONTAINER_NAME}" "--restart" "always"
        "--network" "${SHARED_NETWORK_NAME}"
        "-v" "${WARP_VOLUME_PATH}:/var/lib/cloudflare-warp"
        "-e" "WARP_LICENSE_KEY=${WARP_LICENSE_KEY}"
        "--cap-add" "MKNOD" "--cap-add" "AUDIT_WRITE" "--cap-add" "NET_ADMIN"
        "--device-cgroup-rule" "c 10:200 rwm"
        "--sysctl" "net.ipv6.conf.all.disable_ipv6=0"
        "--sysctl" "net.ipv4.conf.all.src_valid_mark=1"
        "${WARP_IMAGE_NAME}"
    )
    if ! "${WARP_CMD_ARRAY[@]}"; then log ERROR "Failed to deploy WARP container."; return; fi
    log INFO "${WARP_CONTAINER_NAME} deployed successfully."

    # Deploy Hysteria Container
    log INFO "Deploying ${HYSTERIA_CONTAINER_NAME} container..."
    HY_CMD_ARRAY=(
        "docker" "run" "-d" "--name" "${HYSTERIA_CONTAINER_NAME}" "--restart" "always"
        "--network" "${SHARED_NETWORK_NAME}"
        "-v" "${HYSTERIA_CONFIG_FILE}:/config.yaml:ro"
        "-v" "${CADDY_DATA_VOLUME}:/data:ro"
        "-p" "443:443/udp"
        "${HYSTERIA_IMAGE_NAME}" "server" "-c" "/config.yaml"
    )
    if ! "${HY_CMD_ARRAY[@]}"; then log ERROR "Failed to deploy Hysteria container."; return; fi
    log INFO "${HYSTERIA_CONTAINER_NAME} deployed successfully."

    log INFO "--- Deployment Finished ---"
    log INFO "Please wait about 20 seconds for services to initialize."
    log INFO "Your Hysteria client configuration:"
    echo -e "  Server: ${FontColor_Yellow}${HY_DOMAIN}:443${FontColor_Suffix}"
    echo -e "  Auth:   ${FontColor_Yellow}${HY_PASSWORD}${FontColor_Suffix}"
    echo -e "  TLS SNI:${FontColor_Yellow}${HY_DOMAIN}${FontColor_Suffix}"
}

# 2. Uninstall All Services
uninstall_all() {
    log INFO "This will stop and remove both WARP and Hysteria containers, and the shared network."
    read -p "Are you sure you want to continue? (y/N): " choice < /dev/tty
    if [[ ! "$choice" =~ ^[yY]$ ]]; then log INFO "Uninstallation cancelled."; return; fi

    log INFO "Stopping and removing containers..."
    docker stop "${WARP_CONTAINER_NAME}" "${HYSTERIA_CONTAINER_NAME}" &>/dev/null
    docker rm "${WARP_CONTAINER_NAME}" "${HYSTERIA_CONTAINER_NAME}" &>/dev/null
    
    log INFO "Removing shared network '${SHARED_NETWORK_NAME}'..."
    docker network rm "${SHARED_NETWORK_NAME}" &>/dev/null

    read -p "Delete WARP data volume '${WARP_VOLUME_PATH}'? (y/N): " del_warp_data < /dev/tty
    if [[ "$del_warp_data" =~ ^[yY]$ ]]; then rm -rf "${WARP_VOLUME_PATH}"; log INFO "WARP data deleted."; fi
    
    read -p "Delete Hysteria config directory '${HYSTERIA_CONFIG_DIR}'? (y/N): " del_hy_config < /dev/tty
    if [[ "$del_hy_config" =~ ^[yY]$ ]]; then rm -rf "${HYSTERIA_CONFIG_DIR}"; log INFO "Hysteria config deleted."; fi
    
    log INFO "Uninstallation complete."
}

# 3. Status Check
check_all_status() {
    # WARP Status
    if check_container_exists "$WARP_CONTAINER_NAME"; then
        STATUS=$(docker inspect --format '{{.State.Status}}' "$WARP_CONTAINER_NAME")
        if [ "$STATUS" == "running" ]; then
            WARP_STATUS_zh="${FontColor_Green}运行中${FontColor_Suffix}"
            WARP_STATUS_raw=$(docker exec "$WARP_CONTAINER_NAME" curl -s --proxy socks5h://127.0.0.1:1080 https://www.cloudflare.com/cdn-cgi/trace --connect-timeout 3 | grep "warp=" | cut -d'=' -f2)
            case ${WARP_STATUS_raw} in
                on)   WARP_CONNECTION_zh="${FontColor_Green}已连接 (WARP)${FontColor_Suffix}";;
                plus) WARP_CONNECTION_zh="${FontColor_Green}已连接 (WARP+)${FontColor_Suffix}";;
                *)    WARP_CONNECTION_zh="${FontColor_Yellow}初始化中...${FontColor_Suffix}";;
            esac
        else
            WARP_STATUS_zh="${FontColor_Red}已停止 (${STATUS})${FontColor_Suffix}"
            WARP_CONNECTION_zh="${FontColor_Red}未连接${FontColor_Suffix}"
        fi
    else
        WARP_STATUS_zh="${FontColor_Red}未安装${FontColor_Suffix}"
        WARP_CONNECTION_zh="N/A"
    fi

    # Hysteria Status
    if check_container_exists "$HYSTERIA_CONTAINER_NAME"; then
        STATUS=$(docker inspect --format '{{.State.Status}}' "$HYSTERIA_CONTAINER_NAME")
        if [ "$STATUS" == "running" ]; then
            HY_STATUS_zh="${FontColor_Green}运行中${FontColor_Suffix}"
        else
            HY_STATUS_zh="${FontColor_Red}异常 (${STATUS})${FontColor_Suffix}"
        fi
    else
        HY_STATUS_zh="${FontColor_Red}未安装${FontColor_Suffix}"
    fi
}

# Sub-menus for individual management
menu_warp() {
    log INFO "Managing WARP Container..."
    docker logs -f "${WARP_CONTAINER_NAME}"
}

menu_hysteria() {
    while true; do
        clear
        log INFO "--- Hysteria Management ---"
        echo " 1. View Logs"
        echo " 2. Restart Container"
        echo " 0. Back to Main Menu"
        read -p "Select an option: " choice < /dev/tty
        case "$choice" in
            1) docker logs -f "${HYSTERIA_CONTAINER_NAME}"; press_any_key;;
            2) log INFO "Restarting Hysteria..."; docker restart "${HYSTERIA_CONTAINER_NAME}"; sleep 2;;
            0) break;;
            *) log ERROR "Invalid option."; sleep 1;;
        esac
    done
}


# --- Main Menu ---
start_menu() {
    while true; do
        log INFO "Checking services status..."
        check_all_status
        clear
        echo -e "
${FontColor_Purple}WARP + Hysteria All-in-One Manager${FontColor_Suffix} (Style by ${FontColor_Yellow}P3TERX${FontColor_Suffix})

 --------------------------------------------------
  WARP Container   : ${WARP_STATUS_zh}
  WARP Connection  : ${WARP_CONNECTION_zh}
 --------------------------------------------------
  Hysteria Container: ${HY_STATUS_zh}
 --------------------------------------------------

 ${FontColor_Green}1.${FontColor_Suffix} 安装 WARP 和 Hysteria (首次部署)
 ${FontColor_Green}2.${FontColor_Suffix} 查看 WARP 日誌
 ${FontColor_Green}3.${FontColor_Suffix} 管理 Hysteria
 ${FontColor_Red}4.${FontColor_Suffix} 卸載所有服務
 
 ${FontColor_Yellow}0.${FontColor_Suffix} 退出脚本
"
        read -p "请输入选项 [0-4]: " num < /dev/tty
        case "$num" in
            1) install_all; press_any_key;;
            2) menu_warp;;
            3) menu_hysteria;;
            4) uninstall_all; press_any_key;;
            0) exit 0;;
            *) log ERROR "无效输入!"; sleep 2;;
        esac
    done
}

# --- Script Entrypoint ---
clear
cat <<-'EOM'
 __      __      _   _             _             _
 \ \    / /     | | | |           | |           (_)
  \ \  / /  __ _| |_| |_ ___ _ __ | |_ __ _ _ __ _  ___
   \ \/ /  / _` | __| __/ _ \ '_ \| __/ _` | '__| |/ __|
    \  /  | (_| | |_| ||  __/ | | | || (_| | |  | | (__
     \/    \__,_|\__|\__\___|_| |_|\__\__,_|_|  |_|\___|
                      _   _
                     | | | |
  ___ _ __ ___  _   _| |_| |__   ___ _ __
 / __| '__/ _ \| | | | __| '_ \ / _ \ '__|
| (__| | | (_) | |_| | |_| | | |  __/ |
 \___|_|  \___/ \__,_|\__|_| |_|\___|_|

EOM
echo -e "${FontColor_Purple}WARP + Hysteria All-in-One Docker Manager${FontColor_Suffix}"
echo "----------------------------------------------------------------"

check_docker
start_menu
